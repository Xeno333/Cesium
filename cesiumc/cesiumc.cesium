import stdlib.cesium
c{
	#include <unistd.h>
}c


//req free
mut u8* fin = NULL
mut u8* foutmid = NULL
mut u8* gcc_args = NULL
mut u8* foutc = NULL

mut u64 clayer = 0
mut bool cflag = true

//other
mut u8* fout = NULL


func leave() : i32 {
	if (fin != NULL) {
		free(fin)
	}
	if (foutc != NULL) {
		free(foutc)
	}
	if (foutmid != NULL) {
		free(foutmid)
	}
	if (gcc_args != NULL) {
		free(gcc_args)
	}

	printf("\n")
	return 0
}


//checks if s1 starts with s2 and directly after s2 in s1, s1 ends with ' ' or '\t'
func startswith(u8* s1, u8* s2) : bool {
	mut u64 p = -1

	while (true) {
		p++

		//if p2 ends
		if (s2[p] == 0) {
			break
		}

		//compare
		if (s2[p] == s1[p]) {
			continue
		}

		//if s1 is ended
		if (s1[p] == 0) {
			return false
		}
		//if not equal
		return false
	}

	if (u8isin("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_", getstrlen("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_") - 1, s1[p]) == false) {
		return true
	}

	return false
}

func getlinelen(u8* str) : u64 {
    mut u64 r = 0
    while ((str[r] != '\n') && (str[r] != 0) && (str[r] != ';')) {
        r++
    }
    r++
    return r
}


func do_block(u8* block) : u8* {
	
}


mut u64 parse_layer = 0

func parse_line(u8* in)  : u8* {
	mut u64 offset = 0
	while ((in[offset] == ' ') || (in[offset] == '\t')) {
		offset++
	}
	
	u8* line = in + offset

	//dopart
	if (startswith(line, "import")) {
		mut u64 p = 6
		while (true) {
			if ((line[p] == ' ') || (line[p] == '\t')) {
				p++
				continue
			}
			break
		}
		return line + p
	}
	if (startswith(line, "break")) {
		parse_layer++
		u8* lay = malloc(parse_layer + 2)
		strcpy(lay, "")
		mut u64 p = 0
		while (p != parse_layer) {
			strcat(lay, ":")
			p++
		} 
		strcat(lay, ">")
		append(foutmid, lay, (getstrlen(lay) - 1) : u64)
		append(foutmid, "break\n", (getstrlen("break\n") - 1) : u64)
		append(foutmid, lay, (getstrlen(lay) - 1) : u64)
		append(foutmid, "ENDSTATEMENT\n", (getstrlen("ENDSTATEMENT\n") - 1) : u64)
		parse_layer--
		return NULL
	}
	if (startswith(line, "continue")) {
		parse_layer++
		u8* lay = malloc(parse_layer + 2)
		strcpy(lay, "")
		mut u64 p = 0
		while (p != parse_layer) {
			p++
			strcat(lay, ":")
		} 
		strcat(lay, ">")
		append(foutmid, lay, (getstrlen(lay) - 1) : u64)
		append(foutmid, "continue\n", (getstrlen("continue\n") - 1) : u64)
		append(foutmid, lay, (getstrlen(lay) - 1) : u64)
		append(foutmid, "ENDSTATEMENT\n", (getstrlen("ENDSTATEMENT\n") - 1) : u64)
		parse_layer--
		return NULL
	}



	return NULL//line2
}

func gimpf(u8* fn, mut u8* block) : u8* {
	if (startswith(fn, "/") || startswith(fn, ".") || startswith(fn, "~")) {
		return fn
	}

	mut u8 b1[2048]
	readlink("/proc/self/exe", b1, 2048-270)
	u8 *last_slash = strrchr(b1, '/');
	*last_slash = 0
	strcpy(block, b1)
	strcat(block, "/lib/")
	strcat(block, fn)
	return block
}

func parse() {
	mut u64 e = getstrlen(fin)
	mut u64 p = 0

	//loop lines
	while (p <= e) {
		u64 llen = getlinelen((fin+p))
		mut u8* l = malloc(llen)

		mut u64 i = 0
		while (i != (llen - 1)) {
			l[i] = (fin+p)[i]
			i++
		}
		l[i] = 0

		mut u64 offset = 0
		while ((l[offset] == ' ') || (l[offset] == '\t')) {
			offset++
		}
		
		u8* line = l + offset

		if (startswith(line, "c")) {
			cflag = true
			mut u64 i = 0
			while (line[i] != 0) {
				if (line[i] == 0x7b/*{*/) {
					clayer++
				}
				if (line[i] == 0x7d/*}*/) {
					clayer--
				}
				i++
			}

			free(l)
			p += llen
			continue
		}

		//Import
		if (parse_line(l) != NULL) {
			char path[2048];
			u8* fimp = fget(gimpf(parse_line(l), path))
			if (fimp == NULL) {
				printf("ERROR: Could not read: %s\n", fimp)
				return leave()
			}
			u64 fimps = getstrlen(fimp)
			mut u8* block = malloc(e + fimps + 1)

			//do import
			mut u64 p1 = 0
			mut u64 p2 = 0
			while (p2 != p) {
				block[p1++] = fin[p2++]
			}
			p2 = 0
			while (p2 != fimps-1) {
				block[p1++] = fimp[p2++]
			}
			p2 = p + llen
			while (p2 != e+1) {
				block[p1++] = fin[p2++]
			}
			
			free(fimp)

			free(fin)
			fin = block
			e = getstrlen(fin)
		}
		
		free(l)
		p += llen
	}
	
	return
}



//main function
func main(i32 argc, u8** args) : i32 {
	//printf("Hello from cesiumc!\nRunning command: ")

	mut u64 i = 2
	mut u64 out_args_len = 1
	while (i != argc) {
		out_args_len += (getstrlen(args[i])) : u64
		i++
	}

	gcc_args = malloc(out_args_len)
	gcc_args[0] = 0
	strcat

	i = 2
	while (i != argc) {
		strcat(gcc_args, args[i])
		strcat(gcc_args, " ")
		i++
	}

	foutmid = malloc((getstrlen(args[1]) + getstrlen(".midpoint") - 1) : u64)
	strcpy(foutmid, args[1])
	strcat(foutmid, ".midpoint")
	u64* f = fopen(foutmid, "w")
	if (f == NULL) {
		printf("ERROR: Could not open: %s\n", foutmid)
		return leave()
	}
    fclose(f)

	foutc = malloc((getstrlen(args[1]) + getstrlen(".c") - 1) : u64)
	strcpy(foutc, args[1])
	strcat(foutc, ".c")
	f = fopen(foutc, "w")
	if (f == NULL) {
		printf("ERROR: Could not open: %s\n", foutc)
		return leave()
	}
    fclose(f)


	fin = fget(args[1])
	if (fin == NULL) {
		printf("ERROR: Could not read: %s\n", args[1])
		return leave()
	}

	parse()

	mut u8* cmd = malloc(getstrlen(gcc_args) + getstrlen(foutc) + getstrlen("gcc "))
	strcpy(cmd, "gcc ")
	strcat(cmd, foutc)
	strcat(cmd, " ")
	strcat(cmd, gcc_args)

	printf("\nCompile with: %s\n\n", cmd)
	//system(cmd)
	free(cmd)

	return leave()
}
