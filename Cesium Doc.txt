Design for new Language.

Compiled to C then useses gcc

remember to add ... args in C

--This is not going to be suported in first version so do not use ;
; is optianal but can be used if more then one statement on line

Keywords:

	Declaritive and flow:
		cref	-	Refrence code or data in C. Kind of like extern but only to not C code that is defined localy as C. Use ectern if linked
		extern	-	Same as extern in C.
		func	-	Declare function.
		return	-	Return value.
		if	-	Do block is statement is true.
		else	-	Do block if prevuse statements are false.
		for	-	Same as for in C.
		while	-	Same as while in C.
		break	-	Break loop.
		continue-	Return to start of loop.
		c	-	Compile this block as C code.
		asm	-	Compile this block as asm.
		
	Definitions:
		i64	-	64 bit int.
		i32	-	32 bit int.
		i16	-	16 bit int.
		i8	-	8 bit int.
		u64	-	Unsigned 64 bit int.
		u32	-	Unsigned 32 bit int.
		u16	-	Unsigned 16 bit int.
		u8	-	Unsigned 8 bit int.
		f64	-	64 bit float(double in C.)
		f32	-	32 bti float.
		typedef	-	Declare a type.
		struct	-	Make a structure.
		enum	-	Same as C "enum"
		bool	-	'true' or 'false'
		
	Qualifiers:
		mut	-	Make a varible mutable as all are immutible by default.
		static	-	Make a varible keep its value even when out of scope.
		register-	Tell compiler to place in a register. (Only works on local registers.)
		local	-	Makes function or global var local to file.
		volital	-	Volital.
		
	Compile time:
		include	-	Include other file.
		const	-	Define a compile time value.
		macro	-	Macro's used at compile time.
		
	Objects:
		class 	-	Declare a class. Usage: class <name> <<Inheratance>>
		self	-	Self is a pointer to itself.
		scope	-	Esentuly a namespace.
		


Operators:
	Same as C
	
sytext:
	()	args, logic statements and order of operations
	[]	arrays size and refrencing
	{}	code block container
	:	casting and defining function return type
	<>	Inheratence
	

Code:
	Arrays:
		<Type> <Name>[<Size>]	For set sized arrays.
		<Type>* <Name>		For pointer arrays.
